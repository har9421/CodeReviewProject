{
  "version": "1.0",
  "csharp": {
    "rules": [
      {
        "id": "CS001",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "class|interface|enum|struct",
        "applies_to": "type_declaration",
        "message": "Type names should be in PascalCase.",
        "severity": "warning"
      },
      {
        "id": "CS002",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "method",
        "applies_to": "method_declaration",
        "message": "Method names should be in PascalCase.",
        "severity": "warning"
      },
      {
        "id": "CS003",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "variable",
        "applies_to": "local_variable",
        "message": "Local variables should be in camelCase.",
        "severity": "warning"
      },
      {
        "id": "CS004",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "property",
        "applies_to": "property_declaration",
        "message": "Property names should be in PascalCase.",
        "severity": "warning"
      },
      {
        "id": "CS005",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "const",
        "applies_to": "field_declaration",
        "message": "Constants should be in ALL_CAPS with underscores.",
        "severity": "warning"
      },
      {
        "id": "CS006",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "interface",
        "applies_to": "interface_declaration",
        "message": "Interfaces should start with 'I'.",
        "severity": "warning"
      },
      {
        "id": "CS007",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "private_field",
        "applies_to": "field_declaration",
        "message": "Private fields should be in camelCase and prefixed with '_'.",
        "severity": "warning"
      },
      {
        "id": "CS008",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "async",
        "applies_to": "method_declaration",
        "message": "Async methods should end with 'Async' suffix.",
        "severity": "warning"
      },
      {
        "id": "CS009",
        "category": "Naming Conventions",
        "type": "style",
        "pattern": "event",
        "applies_to": "event_declaration",
        "message": "Event names should be in PascalCase and use verb form.",
        "severity": "warning"
      },
      {
        "id": "CS010",
        "category": "Code Style",
        "type": "style",
        "pattern": "indentation",
        "applies_to": "all",
        "message": "Use 4 spaces per indentation level, no tabs.",
        "severity": "warning"
      },
      {
        "id": "CS011",
        "category": "Code Style",
        "type": "style",
        "pattern": "braces",
        "applies_to": "block",
        "message": "Use braces for all control statements (if, for, while, etc.).",
        "severity": "warning"
      },
      {
        "id": "CS012",
        "category": "Code Style",
        "type": "style",
        "pattern": "using",
        "applies_to": "namespace",
        "message": "Place 'using' directives inside namespace declarations.",
        "severity": "warning"
      },
      {
        "id": "CS013",
        "category": "Code Style",
        "type": "style",
        "pattern": "file",
        "applies_to": "file",
        "message": "One class per file; file name should match class name.",
        "severity": "warning"
      },
      {
        "id": "CS014",
        "category": "Code Style",
        "type": "style",
        "pattern": "line_length",
        "applies_to": "all",
        "message": "Maximum line length should be 120 characters.",
        "severity": "warning"
      },
      {
        "id": "CS015",
        "category": "Error Handling",
        "type": "style",
        "pattern": "try-catch",
        "applies_to": "exception_handling",
        "message": "Always catch specific exceptions instead of generic Exception.",
        "severity": "error"
      },
      {
        "id": "CS016",
        "category": "Error Handling",
        "type": "style",
        "pattern": "finally",
        "applies_to": "exception_handling",
        "message": "Use finally block or 'using' for resource cleanup.",
        "severity": "warning"
      },
      {
        "id": "CS017",
        "category": "Error Handling",
        "type": "forbidden",
        "pattern": "throw ex",
        "applies_to": "exception_handling",
        "message": "Do not use 'throw ex'; use 'throw' to preserve stack trace.",
        "severity": "error"
      },
      {
        "id": "CS018",
        "category": "Error Handling",
        "type": "style",
        "pattern": "logging",
        "applies_to": "exception_handling",
        "message": "Log exceptions before rethrowing or handling.",
        "severity": "warning"
      },
      {
        "id": "CS019",
        "category": "Performance",
        "type": "forbidden",
        "pattern": "Thread.Sleep",
        "applies_to": "method_call",
        "message": "Avoid Thread.Sleep. Use Task.Delay or proper synchronization.",
        "severity": "error"
      },
      {
        "id": "CS020",
        "category": "Performance",
        "type": "forbidden",
        "pattern": "GC.Collect",
        "applies_to": "method_call",
        "message": "Do not call GC.Collect manually.",
        "severity": "error"
      },
      {
        "id": "CS021",
        "category": "Performance",
        "type": "style",
        "pattern": "LINQ",
        "applies_to": "query",
        "message": "Avoid multiple enumerations of IEnumerable in LINQ queries.",
        "severity": "warning"
      },
      {
        "id": "CS022",
        "category": "Performance",
        "type": "style",
        "pattern": "async",
        "applies_to": "method",
        "message": "Use ConfigureAwait(false) in library code to avoid deadlocks.",
        "severity": "warning"
      },
      {
        "id": "CS023",
        "category": "Security",
        "type": "forbidden",
        "pattern": "Console.WriteLine",
        "applies_to": "method_call",
        "message": "Avoid Console.WriteLine in production; use logging framework.",
        "severity": "error"
      },
      {
        "id": "CS024",
        "category": "Security",
        "type": "forbidden",
        "pattern": "SqlCommand.*string_concatenation",
        "applies_to": "database_query",
        "message": "Avoid SQL injection: use parameterized queries.",
        "severity": "error"
      },
      {
        "id": "CS025",
        "category": "Security",
        "type": "forbidden",
        "pattern": "hardcoded_password",
        "applies_to": "string_literal",
        "message": "Do not store hardcoded passwords or secrets in code.",
        "severity": "error"
      },
      {
        "id": "CS026",
        "category": "Security",
        "type": "style",
        "pattern": "encryption",
        "applies_to": "data_handling",
        "message": "Always use secure hashing (SHA256 or stronger) instead of MD5/SHA1.",
        "severity": "error"
      },
      {
        "id": "CS027",
        "category": "Project Practices",
        "type": "style",
        "pattern": "comments",
        "applies_to": "public_api",
        "message": "Public methods, classes, and interfaces should have XML documentation comments.",
        "severity": "warning"
      },
      {
        "id": "CS028",
        "category": "Project Practices",
        "type": "style",
        "pattern": "region",
        "applies_to": "code_blocks",
        "message": "Avoid excessive use of #region. Keep methods and classes small and readable.",
        "severity": "warning"
      },
      {
        "id": "CS029",
        "category": "Project Practices",
        "type": "style",
        "pattern": "magic_number",
        "applies_to": "constants",
        "message": "Do not use magic numbers; use named constants or enums.",
        "severity": "warning"
      },
      {
        "id": "CS030",
        "category": "Project Practices",
        "type": "style",
        "pattern": "async_void",
        "applies_to": "method",
        "message": "Avoid async void methods. Use async Task instead.",
        "severity": "error"
      }
    ]
  },
  "javascript": {
    "eslintOverride": {
      "rules": {
        "no-console": "error",
        "camelcase": "warn"
      }
    }
  }
}