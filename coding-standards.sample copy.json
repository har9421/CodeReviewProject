{
  "version": "1.0",
  "csharp": {
  "rules": [
    {
      "id": "CS001",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "class|interface|enum|struct",
      "applies_to": "type_declaration",
      "message": "Type names should be in PascalCase.",
      "severity": "warning"
    },
    {
      "id": "CS002",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "method",
      "applies_to": "method_declaration",
      "message": "Method names should be in PascalCase.",
      "severity": "warning"
    },
    {
      "id": "CS003",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "variable",
      "applies_to": "local_variable",
      "message": "Local variables should be in camelCase.",
      "severity": "warning"
    },
    {
      "id": "CS004",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "property",
      "applies_to": "property_declaration",
      "message": "Property names should be in PascalCase.",
      "severity": "warning"
    },
    {
      "id": "CS005",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "const",
      "applies_to": "field_declaration",
      "message": "Constants should be in ALL_CAPS with underscores.",
      "severity": "warning"
    },
    {
      "id": "CS006",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "interface",
      "applies_to": "interface_declaration",
      "message": "Interfaces should start with 'I'.",
      "severity": "warning"
    },
    {
      "id": "CS007",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "private_field",
      "applies_to": "field_declaration",
      "message": "Private fields should be in camelCase and prefixed with '_'.",
      "severity": "warning"
    },
    {
      "id": "CS008",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "async",
      "applies_to": "method_declaration",
      "message": "Async methods should end with 'Async' suffix.",
      "severity": "warning"
    },
    {
      "id": "CS009",
      "category": "Naming Conventions",
      "type": "style",
      "pattern": "event",
      "applies_to": "event_declaration",
      "message": "Event names should be in PascalCase and use verb form.",
      "severity": "warning"
    },
    {
      "id": "CS010",
      "category": "Code Style",
      "type": "style",
      "pattern": "indentation",
      "applies_to": "all",
      "message": "Use 4 spaces per indentation level, no tabs.",
      "severity": "warning"
    },
    {
      "id": "CS011",
      "category": "Code Style",
      "type": "style",
      "pattern": "braces",
      "applies_to": "block",
      "message": "Use braces for all control statements (if, for, while, etc.).",
      "severity": "warning"
    },
    {
      "id": "CS012",
      "category": "Code Style",
      "type": "style",
      "pattern": "using",
      "applies_to": "namespace",
      "message": "Place 'using' directives inside namespace declarations.",
      "severity": "warning"
    },
    {
      "id": "CS013",
      "category": "Code Style",
      "type": "style",
      "pattern": "file",
      "applies_to": "file",
      "message": "One class per file; file name should match class name.",
      "severity": "warning"
    },
    {
      "id": "CS014",
      "category": "Code Style",
      "type": "style",
      "pattern": "line_length",
      "applies_to": "all",
      "message": "Maximum line length should be 120 characters.",
      "severity": "warning"
    },
    {
      "id": "CS015",
      "category": "Code Style",
      "type": "style",
      "pattern": "var_usage",
      "applies_to": "variable_declaration",
      "message": "Use 'var' when type is obvious; otherwise, use explicit type.",
      "severity": "warning"
    },
    {
      "id": "CS016",
      "category": "Code Style",
      "type": "style",
      "pattern": "object_initializer",
      "applies_to": "object_creation",
      "message": "Use object initializers for readability when possible.",
      "severity": "warning"
    },
    {
      "id": "CS017",
      "category": "Error Handling",
      "type": "style",
      "pattern": "try-catch",
      "applies_to": "exception_handling",
      "message": "Always catch specific exceptions instead of generic Exception.",
      "severity": "error"
    },
    {
      "id": "CS018",
      "category": "Error Handling",
      "type": "style",
      "pattern": "finally",
      "applies_to": "exception_handling",
      "message": "Use finally block or 'using' for resource cleanup.",
      "severity": "warning"
    },
    {
      "id": "CS019",
      "category": "Error Handling",
      "type": "forbidden",
      "pattern": "throw ex",
      "applies_to": "exception_handling",
      "message": "Do not use 'throw ex'; use 'throw' to preserve stack trace.",
      "severity": "error"
    },
    {
      "id": "CS020",
      "category": "Error Handling",
      "type": "style",
      "pattern": "logging",
      "applies_to": "exception_handling",
      "message": "Log exceptions before rethrowing or handling.",
      "severity": "warning"
    },
    {
      "id": "CS021",
      "category": "Performance",
      "type": "forbidden",
      "pattern": "Thread.Sleep",
      "applies_to": "method_call",
      "message": "Avoid Thread.Sleep. Use Task.Delay or proper synchronization.",
      "severity": "error"
    },
    {
      "id": "CS022",
      "category": "Performance",
      "type": "forbidden",
      "pattern": "GC.Collect",
      "applies_to": "method_call",
      "message": "Do not call GC.Collect manually.",
      "severity": "error"
    },
    {
      "id": "CS023",
      "category": "Performance",
      "type": "style",
      "pattern": "LINQ",
      "applies_to": "query",
      "message": "Avoid multiple enumerations of IEnumerable in LINQ queries.",
      "severity": "warning"
    },
    {
      "id": "CS024",
      "category": "Performance",
      "type": "style",
      "pattern": "async",
      "applies_to": "method",
      "message": "Use ConfigureAwait(false) in library code to avoid deadlocks.",
      "severity": "warning"
    },
    {
      "id": "CS025",
      "category": "Performance",
      "type": "style",
      "pattern": "string_builder",
      "applies_to": "string_operations",
      "message": "Use StringBuilder for repeated string concatenation in loops.",
      "severity": "warning"
    },
    {
      "id": "CS026",
      "category": "Security",
      "type": "forbidden",
      "pattern": "Console.WriteLine",
      "applies_to": "method_call",
      "message": "Avoid Console.WriteLine in production; use logging framework.",
      "severity": "error"
    },
    {
      "id": "CS027",
      "category": "Security",
      "type": "forbidden",
      "pattern": "SqlCommand.*string_concatenation",
      "applies_to": "database_query",
      "message": "Avoid SQL injection: use parameterized queries.",
      "severity": "error"
    },
    {
      "id": "CS028",
      "category": "Security",
      "type": "forbidden",
      "pattern": "hardcoded_password",
      "applies_to": "string_literal",
      "message": "Do not store hardcoded passwords or secrets in code.",
      "severity": "error"
    },
    {
      "id": "CS029",
      "category": "Security",
      "type": "style",
      "pattern": "encryption",
      "applies_to": "data_handling",
      "message": "Always use secure hashing (SHA256 or stronger) instead of MD5/SHA1.",
      "severity": "error"
    },
    {
      "id": "CS030",
      "category": "Security",
      "type": "style",
      "pattern": "input_validation",
      "applies_to": "user_input",
      "message": "Always validate and sanitize user input.",
      "severity": "error"
    },
    {
      "id": "CS031",
      "category": "Project Practices",
      "type": "style",
      "pattern": "comments",
      "applies_to": "public_api",
      "message": "Public methods, classes, and interfaces should have XML documentation comments.",
      "severity": "warning"
    },
    {
      "id": "CS032",
      "category": "Project Practices",
      "type": "style",
      "pattern": "region",
      "applies_to": "code_blocks",
      "message": "Avoid excessive use of #region. Keep methods and classes small and readable.",
      "severity": "warning"
    },
    {
      "id": "CS033",
      "category": "Project Practices",
      "type": "style",
      "pattern": "magic_number",
      "applies_to": "constants",
      "message": "Do not use magic numbers; use named constants or enums.",
      "severity": "warning"
    },
    {
      "id": "CS034",
      "category": "Project Practices",
      "type": "style",
      "pattern": "async_void",
      "applies_to": "method",
      "message": "Avoid async void methods. Use async Task instead.",
      "severity": "error"
    },
    {
      "id": "CS035",
      "category": "Project Practices",
      "type": "style",
      "pattern": "dependency_injection",
      "applies_to": "services",
      "message": "Use dependency injection instead of creating instances manually.",
      "severity": "warning"
    },
    {
      "id": "CS036",
      "category": "Project Practices",
      "type": "style",
      "pattern": "SOLID",
      "applies_to": "class_design",
      "message": "Classes should follow SOLID principles for maintainability.",
      "severity": "warning"
    },
    {
      "id": "CS037",
      "category": "Testing",
      "type": "style",
      "pattern": "unit_test",
      "applies_to": "test_method",
      "message": "Unit tests should follow Arrange-Act-Assert pattern.",
      "severity": "warning"
    },
    {
      "id": "CS038",
      "category": "Testing",
      "type": "style",
      "pattern": "async_test",
      "applies_to": "test_method",
      "message": "Test async methods using async Task, not void.",
      "severity": "error"
    },
    {
      "id": "CS039",
      "category": "Testing",
      "type": "style",
      "pattern": "asserts",
      "applies_to": "test_method",
      "message": "Each unit test should contain at least one assertion.",
      "severity": "error"
    },
    {
      "id": "CS040",
      "category": "Testing",
      "type": "style",
      "pattern": "mocking",
      "applies_to": "test_method",
      "message": "Use mocking frameworks instead of hand-written stubs when appropriate.",
      "severity": "warning"
    },
    {
      "id": "CS041",
      "category": "Clean Code",
      "type": "style",
      "pattern": "method_length",
      "applies_to": "method",
      "message": "Methods should not exceed 40 lines. Refactor into smaller methods.",
      "severity": "warning"
    },
    {
      "id": "CS042",
      "category": "Clean Code",
      "type": "style",
      "pattern": "class_length",
      "applies_to": "class",
      "message": "Classes should not exceed 500 lines. Break into smaller components.",
      "severity": "warning"
    },
    {
      "id": "CS043",
      "category": "Clean Code",
      "type": "style",
      "pattern": "nested_loops",
      "applies_to": "loops",
      "message": "Avoid deep nesting of loops or conditionals beyond 3 levels.",
      "severity": "warning"
    },
    {
      "id": "CS044",
      "category": "Clean Code",
      "type": "style",
      "pattern": "switch_expression",
      "applies_to": "switch_statement",
      "message": "Prefer switch expressions for conciseness when appropriate.",
      "severity": "warning"
    },
    {
      "id": "CS045",
      "category": "Clean Code",
      "type": "style",
      "pattern": "null_checks",
      "applies_to": "method",
      "message": "Use null-coalescing operators or pattern matching for null checks.",
      "severity": "warning"
    },
    {
      "id": "CS046",
      "category": "API Design",
      "type": "style",
      "pattern": "public_api",
      "applies_to": "method",
      "message": "Public APIs should be versioned and backward compatible.",
      "severity": "warning"
    },
    {
      "id": "CS047",
      "category": "API Design",
      "type": "style",
      "pattern": "DTO",
      "applies_to": "class",
      "message": "Use DTOs for API requests/responses. Avoid exposing domain models directly.",
      "severity": "error"
    },
    {
      "id": "CS048",
      "category": "API Design",
      "type": "style",
      "pattern": "logging",
      "applies_to": "controller",
      "message": "Log all API requests and responses at appropriate levels (Info/Error).",
      "severity": "warning"
    },
    {
      "id": "CS049",
      "category": "Architecture",
      "type": "style",
      "pattern": "layering",
      "applies_to": "project_structure",
      "message": "Maintain clear separation between layers: Controller, Service, Repository.",
      "severity": "warning"
    },
    {
      "id": "CS050",
      "category": "Architecture",
      "type": "style",
      "pattern": "async_api",
      "applies_to": "controller",
      "message": "All I/O-bound public APIs should be asynchronous.",
      "severity": "error"
    }
  ]
},
  "javascript": {
    "eslintOverride": {
      "rules": {
        "no-console": "error",
        "camelcase": "warn"
      }
    }
  }
}